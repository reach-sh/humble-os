### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""Blockchain network"""
enum HSBlockchain {
  ALGO
  ETH
  SOLANA
}

"""Network provider (mainnet/testnet)"""
enum HSBlockchainProvider {
  mainnet
  testnet
}

"""UTC Date-time"""
scalar HSDateTime

"""A staking farm"""
type HSFarm {
  FarmLiquidity: [HSFarmLiquidity]
  chain: HSBlockchain!
  contractId: String!

  """Farm start and end dates"""
  duration(format: String): HSFarmDuration
  endBlock: String!
  endDate: HSDateTime
  id: String!

  """When true, Farm rewards payout has ended"""
  isEnded: Boolean
  isPartnerFarm: Boolean
  lastUpdated: HSDateTime
  networkRewardsPerBlock: String!
  pairTokenADecimals: String
  pairTokenAId: String
  pairTokenASymbol: String
  pairTokenBDecimals: String
  pairTokenBId: String
  pairTokenBSymbol: String

  """How much of 'stake token' has been minted"""
  primaryStakeTokenBalance: String
  provider: HSBlockchainProvider!
  remainingRewards: HSFarmRewards
  rewardTokenDecimals: Int!
  rewardTokenId: String!
  rewardTokenRewardsPerBlock: String!
  rewardTokenSymbol: String!

  """Rewards paid out per block"""
  rewardsPerBlock: HSFarmRewardsPerBlock

  """Liquidity Pool for farm's staking token"""
  stakeTokenPool: HSPool

  """How much current user has staked. Always 0 in DB"""
  stakedTokenAmt: Int!
  stakedTokenDecimals: Int!
  stakedTokenId: String!
  stakedTokenPoolId: String
  stakedTokenSymbol: String!
  stakedTokenTotalSupply: String!
  startBlock: String!
  startDate: HSDateTime

  """Stake and reward token"""
  tokens: HSFarmTokens

  """Total Rewards allocated for Farm duration"""
  totalReward: HSFarmRewards
  totalRewardA: String!
  totalRewardB: String!
  totalStaked: String
}

"""Farm duration (start/end dates)"""
type HSFarmDuration {
  ends: String!
  starts: String!
}

type HSFarmLiquidity {
  farm: HSFarm
  farmId: String!
  id: Int!
  lastUpdated: HSDateTime!
  primaryStakeTokenBalance: String!
  remainingRewardA: String!
  remainingRewardB: String!
  totalStaked: String!
}

"""Initial or remaining rewards in farm"""
type HSFarmRewards {
  A: String!
  B: String!
}

"""Rewards paid out per block"""
type HSFarmRewardsPerBlock {
  asDefaultNetworkToken: String!
  asRewardToken: String!
}

"""Farm's reward and staking tokens"""
type HSFarmTokens {
  rewardToken: HSToken
  stakeToken: HSToken
}

"""A decentralized limit order"""
type HSLimitOrder {
  """Amount to be sold by creator"""
  amtA: String!

  """Amount to be bought by creator"""
  amtB: String!

  """Announcer contract"""
  announcerId: String!

  """Order application ID"""
  contractId: String!

  """Contract creator"""
  creator: String!

  """Limit Order status"""
  status: HSLimitOrderStatus

  """Token offered by creator"""
  tokenA: String!

  """Sell-token decimals"""
  tokenADecimals: Int!

  """Token requested by creator"""
  tokenB: String!

  """Buy-token decimals"""
  tokenBDecimals: Int!
}

"""Limit Order status (open/closed)"""
enum HSLimitOrderStatus {
  closed
  open
}

type HSPool {
  PoolLiquidity: [HSPoolLiquidity]
  apr7d: String
  apr24h: String
  chain: String!
  duplicate: Boolean
  id: String!
  lastUpdated: HSDateTime!
  mintedLiquidityTokens: String!
  n2nn: Boolean
  poolAddress: String
  poolTokenId: String!
  provider: String!
  tokenABalance: String!
  tokenADecimals: Int!
  tokenAFees: String!
  tokenAId: String!
  tokenBBalance: String!
  tokenBDecimals: Int!
  tokenBFees: String!
  tokenBId: String!
  tokens: [HSToken]
  tradeable: Boolean
  volume7d: String
  volume24h: String
}

type HSPoolLiquidity {
  apr7d: String
  apr24h: String
  id: Int!
  lastUpdated: HSDateTime
  mintedLiquidityTokens: String!
  poolId: String!
  tokenABalance: String!
  tokenAFees: String!
  tokenBBalance: String!
  tokenBFees: String!
  volume7d: String
  volume24h: String
}

"""Active (or legacy) SDK settings"""
type HSSDKSettings {
  environment: String!
  partnerFarmAnnouncerId: String!
  protocolAddress: String!
  protocolId: String!
  publicFarmAnnouncer: String!
  version: HSSDKVersion!
}

"""SDK Version"""
enum HSSDKVersion {
  v2
  v3
}

type HSToken {
  decimals: Int!
  id: String!
  name: String!
  supply: String!
  symbol: String!
  url: String
  verificationTier: HSVerificationTier
  verified: Boolean
}

"""Pera Token Verification Tier (if available)"""
enum HSVerificationTier {
  suspicious
  trusted
  unverified
  verified
}

type HSVersions {
  id: Int!
  limitOrderAnnouncer: String!
  partnerFarmAnnouncer: String!
  protocolId: String!
  publicFarmAnnouncer: String!
  version: String!
}

type Mutation {
  update(auth: String!): String
  updateLimitOrderStatus(announcerId: String, chain: HSBlockchain = ALGO, id: String!, provider: HSBlockchainProvider = testnet, status: HSLimitOrderStatus): HSLimitOrder
  updatePool(announcerId: String, chain: HSBlockchain = ALGO, id: String!, provider: HSBlockchainProvider = testnet, tokenAId: String!, tokenBId: String!): HSPool
}

input PaginationInput {
  descending: Boolean! = false
  limit: Int! = 50
  orderBy: String! = "id"
  page: Int! = 1
}

type Query {
  convertBlockToDate(blockNumber: String!, format: String): String
  getFarm(announcerId: String, chain: HSBlockchain = ALGO, id: String!, provider: HSBlockchainProvider = testnet): HSFarm
  getFarmLiquidity(announcerId: String, chain: HSBlockchain = ALGO, id: String!, provider: HSBlockchainProvider = testnet): HSFarmLiquidity
  getHistoricalFarmLiquidity(announcerId: String, chain: HSBlockchain = ALGO, id: String!, provider: HSBlockchainProvider = testnet, startFromDate: String): [HSFarmLiquidity]
  getHistoricalPoolLiquidity(announcerId: String, chain: HSBlockchain = ALGO, id: String!, provider: HSBlockchainProvider = testnet, startFromDate: String): [HSPoolLiquidity]
  getLPTokenValue(assetBalance: String!, assetId: String!): [String]
  getLimitOrderById(announcerId: String, chain: HSBlockchain = ALGO, id: String!, provider: HSBlockchainProvider = testnet): HSLimitOrder
  getPool(announcerId: String, chain: HSBlockchain = ALGO, id: String!, provider: HSBlockchainProvider = testnet): HSPool
  getPoolByLPToken(announcerId: String, chain: HSBlockchain = ALGO, poolTokenId: String!, provider: HSBlockchainProvider = testnet): HSPool
  getPoolLiquidity(announcerId: String, chain: HSBlockchain = ALGO, id: String!, provider: HSBlockchainProvider = testnet): HSPoolLiquidity
  getSDKAddress(auth: String!): String
  getToken(announcerId: String, chain: HSBlockchain = ALGO, id: String!, provider: HSBlockchainProvider = testnet): HSToken
  getUserFarmStake(address: String!, announcerId: String, assetId: String!, block: String, chain: HSBlockchain = ALGO, provider: HSBlockchainProvider = testnet): String
  listActiveFarms(announcerId: String, chain: HSBlockchain = ALGO, offset: Int, provider: HSBlockchainProvider = testnet): [HSFarm]
  listAnnouncers(env: String! = "dev", version: String! = "v3"): HSSDKSettings
  listEndedFarms(announcerId: String, chain: HSBlockchain = ALGO, offset: Int, provider: HSBlockchainProvider = testnet): [HSFarm]
  listFarms(announcerId: String, chain: HSBlockchain = ALGO, offset: Int, provider: HSBlockchainProvider = testnet): [HSFarm]
  listLimitOrders(announcerId: String, chain: HSBlockchain = ALGO, creator: String, limit: Int, offset: Int = 0, provider: HSBlockchainProvider = testnet, status: HSLimitOrderStatus): [HSLimitOrder]
  listNetworkTokenPools(announcerId: String, chain: HSBlockchain = ALGO, duplicate: Boolean, limit: Int, offset: Int = 0, provider: HSBlockchainProvider = testnet, tradeable: Boolean): [HSPool]
  listNonNetworkTokenPools(announcerId: String, chain: HSBlockchain = ALGO, duplicate: Boolean, limit: Int, offset: Int = 0, provider: HSBlockchainProvider = testnet, tradeable: Boolean): [HSPool]
  listPools(announcerId: String, chain: HSBlockchain = ALGO, duplicate: Boolean, limit: Int, offset: Int = 0, provider: HSBlockchainProvider = testnet, tokenAId: String, tokenBId: String, tradeable: Boolean): [HSPool]
  listTokens(announcerId: String, chain: HSBlockchain = ALGO, ids: [String], offset: Int, provider: HSBlockchainProvider = testnet): [HSToken]
  listUpcomingFarms(announcerId: String, chain: HSBlockchain = ALGO, offset: Int, provider: HSBlockchainProvider = testnet): [HSFarm]
  searchFarmByStakeToken(announcerId: String, chain: HSBlockchain = ALGO, ids: [String!], provider: HSBlockchainProvider = testnet): [HSFarm]
  searchPools(announcerId: String, chain: HSBlockchain = ALGO, duplicate: Boolean, limit: Int, offset: Int = 0, provider: HSBlockchainProvider = testnet, token1: String, token2: String, tradeable: Boolean): [HSPool]
  searchTokens(announcerId: String, chain: HSBlockchain = ALGO, id: String, name: String, provider: HSBlockchainProvider = testnet, symbol: String): [HSToken]
  signMoonpayUrl(amount: String!, currency: String!, walletAddress: String!): String
}